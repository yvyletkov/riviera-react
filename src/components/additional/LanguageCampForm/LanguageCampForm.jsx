import React from 'react';
import {Field, Form, Formik} from 'formik';
import * as Yup from 'yup';
import s from "../../shared/Button/Button.module.scss";
import cx from "classnames";
import {withRouter} from "react-router-dom";
import {request} from "../../../api";
import swal from 'sweetalert2';
// import Cleave from "cleave.js"
import Cleave from 'cleave.js/react';

const Input = ({
                   field,
                   type,
                   form: {touched, errors},
                   ...props
               }) => {
    const classNames = cx('input', {'success': touched[field.name] && !errors[field.name]}, {'error': touched[field.name] && errors[field.name]})
    return <div style={{position: 'relative'}}>
        <input type={type} className={classNames} {...field} {...props} />
        {touched[field.name] &&
        errors[field.name] && <div className="error">{errors[field.name]}</div>}
    </div>
};

const NumInput = ({
                      field,
                      type,
                      form: {touched, errors},
                      ...props
                  }) => {
    const classNames = cx('input', {'success': touched[field.name] && !errors[field.name]}, {'error': touched[field.name] && errors[field.name]})
    return <div style={{position: 'relative'}}>
        <Cleave placeholder="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
                options={{
                    prefix: '+7',
                    delimiters: [' (', ') ', '-', '-'],
                    blocks: [2, 3, 3, 2, 2],
                }}
                className={classNames}
                {...field} {...props}
                type={type}
        />
        {touched[field.name] &&
        errors[field.name] && <div className="error">{errors[field.name]}</div>}
    </div>
};

const LanguageCampForm = ({
                         agreementTextColor = '#000',
                         submitBtnText,
                         setPopupOpen,
                         swalText = '–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –í–∞—à—É –∑–∞—è–≤–∫—É üòå',
                         textAreaPlaceholder = '–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                         requestUrl, ...props
                     }) => {

    const reAge = /^[1-9]?[0-9]{1}$|^100$/;

    Yup.addMethod(Yup.string, "age", function () {
        return this.test("age", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç", value =>
            reAge.test(value)
        );
    });

    Yup.addMethod(Yup.string, "exp", function () {
        return this.test("exp", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", value =>
                reAge.test(value)
        );
    });

    const Schema = Yup.object().shape({
        name: Yup.string()
            .min(2, '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è üò¢')
            .max(25, '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è üò¢')
            .required('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è'),
        childrenName: Yup.string()
            .min(2, '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è —Ä–µ–±–µ–Ω–∫–∞ üò¢')
            .max(25, '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è —Ä–µ–±–µ–Ω–∫–∞ üò¢')
            .required('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–±–µ–Ω–∫–∞'),
        phone: Yup.string()
            .min(18, '–ù–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ')
            .max(18, '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üò¢')
            .required('–≠—Ç–æ –ø–æ–ª–µ —Ç–æ–∂–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ'),
        childrenAge: Yup.string()
            .min(1, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç')
            .max(2, '–í–æ–∑—Ä–∞—Å—Ç —É–∫–∞–∑–∞–Ω –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ üò¢')
            .age()
            .required('–≠—Ç–æ –ø–æ–ª–µ —Ç–æ–∂–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ'),
        childrenExp: Yup.string()
            .min(1, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–ø—ã—Ç')
            .max(2, '–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ üò¢')
            .exp()
            .required('–≠—Ç–æ –ø–æ–ª–µ —Ç–æ–∂–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ'),
    });

    const data = {};


    const onSubmit = (values, {resetForm}) => {
        data.form = {
            "url": `${requestUrl ? requestUrl : window.location.href}`
        };
        data.inputs = [
            {
                "alias": "–ò—Å—Ç–æ—á–Ω–∏–∫",
                "value": "–§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å –Ø–∑—ã–∫–æ–≤–æ–≥–æ –ª–∞–≥–µ—Ä—è",
            },
            {
                "alias": "–ò–º—è",
                "value": values.name,
            },
            {
                "alias": "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                "value": values.phone,
            },
            {
                "alias": "–ò–º—è —Ä–µ–±–µ–Ω–∫–∞",
                "value": values.childrenName,
            },
            {
                "alias": "–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞",
                "value": values.childrenAge,
            },
            {
                "alias": "–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –∏–∑—É—á–∞–µ—Ç —è–∑—ã–∫",
                "value": values.childrenExp,
            },
        ];
        request(data)
            .then((response) => {
                if (response.status === 200) {
                        const name = values.name[0].toUpperCase() + values.name.slice(1);
                        swal.fire({
                            title: `–°–ø–∞—Å–∏–±–æ, ${name}!`,
                            text: swalText,
                            icon: 'success',
                            confirmButtonText: '–•–æ—Ä–æ—à–æ'
                        });
                }
                else throw response
            })
            .catch((err) => {
                swal.fire({
                    title: '–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ü§≠',
                    text: '–ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º!',
                    icon: 'error',
                    confirmButtonText: '–•–æ—Ä–æ—à–æ'
                })
                console.log(err)
            });
        resetForm({})

    };


    return <Formik
        initialValues={{
            name: '',
            phone: '',
            childrenName: '',
            childrenExp: '',
            childrenAge: '',
        }}
        validationSchema={Schema}
        onSubmit={onSubmit}>
        <Form>
            <Field component={Input} name="name" placeholder={'–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è'}/>
            <Field component={NumInput} name="phone" type={"text"} placeholder={'–í–≤–µ–¥–∏—Ç–µ –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω'}/>
            <Field component={Input} name="childrenName" placeholder={'–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–±–µ–Ω–∫–∞'}/>
            <Field component={Input} name="childrenAge" min={7} type={"number"} placeholder={'–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞'}/>
            <Field component={Input} name="childrenExp" min={1} type={"number"} placeholder={'–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –∏–∑—É—á–∞–µ—Ç —è–∑—ã–∫'}/>
            <div className="agreementBlock">
                <input className="agreementCheckbox" type="checkbox" required/>
                <label htmlFor="checkbox-agreement">
                    <p className="checkboxText"
                       style={{color: agreementTextColor}}>–î–∞—é&nbsp;
                        <a className="checkboxText"
                           style={{textDecoration: 'underline', color: agreementTextColor}}
                           href="/document-files/–ü–æ–ª–∏—Ç–∏–∫–∞-–æ–±—Ä–∞–±–æ—Ç–∫–∏-–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö-–¥–∞–Ω–Ω—ã—Ö.pdf"
                           target="_blank">—Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        </a>
                    </p>
                </label>
            </div>
            <button style={{width: '100%'}}
                    className={s.button}
                    type="submit">{submitBtnText}
            </button>
        </Form>
    </Formik>
};

export default withRouter(LanguageCampForm)
