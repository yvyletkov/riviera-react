import React from 'react';
import {Formik, Form, Field} from 'formik';
import * as Yup from 'yup';
import s from "../../shared/Button/Button.module.scss";
import cx from "classnames";
import {withRouter} from "react-router-dom";
import {request} from "../../../api";
import swal from 'sweetalert2';
import Cleave from "cleave.js/react";


const Input = ({
                   field,
                   form: {touched, errors},
                   ...props
               }) => {
    const classNames = cx('input', {'success': touched[field.name] && !errors[field.name]}, {'error': touched[field.name] && errors[field.name]})
    return <div style={{position: 'relative'}}>
        <input type="text" className={classNames} {...field} {...props} />
        {touched[field.name] &&
        errors[field.name] && <div className="error">{errors[field.name]}</div>}
    </div>
};

const NumInput = ({
                      field,
                      type,
                      form: {touched, errors},
                      ...props
                  }) => {
    const classNames = cx('input', {'success': touched[field.name] && !errors[field.name]}, {'error': touched[field.name] && errors[field.name]})
    return <div style={{position: 'relative'}}>
        <Cleave placeholder="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
                options={{
                    prefix: '+7',
                    delimiters: [' (', ') ', '-', '-'],
                    blocks: [2, 3, 3, 2, 2],
                }}
                className={classNames}
                {...field} {...props}
                type={type}
        />
        {touched[field.name] &&
        errors[field.name] && <div className="error">{errors[field.name]}</div>}
    </div>
};

const DateInput = ({
                       field,
                       type,
                       form: {touched, errors},
                       ...props
                   }) => {
    const classNames = cx('input', {'success': touched[field.name] && !errors[field.name]}, {'error': touched[field.name] && errors[field.name]})
    return <div style={{position: 'relative'}}>
        <Cleave placeholder="–î–∞—Ç–∞"
                options={{
                    delimiters: ['.', '.'],
                    blocks: [2, 2, 4],
                }}
                className={classNames}
                {...field} {...props}
                type={type}
        />
        {touched[field.name] &&
        errors[field.name] && <div className="error">{errors[field.name]}</div>}
    </div>
};


const WorkshopForm = ({type,}) => {

    const [showExtraField, setShowExtraField] = React.useState(false)
    const [fieldOfActivityInputValue, setFieldOfActivityInputValue] = React.useState('initial')

    const rePhoneNumber = /^(\+?\d{0,4})?\s?-?\s?(\(?\d{3}\)?)\s?-?\s?(\(?\d{3}\)?)\s?-?\s?(\(?\d{4}\)?)?$/;
    Yup.addMethod(Yup.string, "phone", function () {
        return this.test("phone", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", value =>
            rePhoneNumber.test(value)
        );
    });

    const Schema = Yup.object().shape({
        name: Yup.string()
            .min(2, '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ')
            .max(50, '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è')
            .required('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è'),
        phone: Yup.string()
            .min(18, '–ù–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ')
            .max(18, '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üò¢')
            // .matches('^([A-Z]+, )?$', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã')
            // .number()
            // .phone()
            .required('–≠—Ç–æ –ø–æ–ª–µ —Ç–æ–∂–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ'),
        weddingDate: Yup.string()
            .required('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É')
            .min(10, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì')
            .max(10, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì'),
        city: Yup.string()
            .required('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, –æ—Ç–∫—É–¥–∞ –í—ã'),
        guestsAmount: Yup.string()
            .required('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π')
            .min(2, '–°–ª–∏—à–∫–æ–º –º–∞–ª–æ –±—É–∫–≤ üò¢')
            .max(15, '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±—É–∫–≤ üò¢'),
        requiredSpecialist: Yup.string()
            .required('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞'),
        companyName: Yup.string()
            .required('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏')
            .min(2, '–°–ª–∏—à–∫–æ–º –º–∞–ª–æ –±—É–∫–≤ üò¢')
            .max(20, '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±—É–∫–≤ üò¢'),
        fieldOfActivity: Yup.string()
            .required('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Ñ–µ—Ä—É —Å–≤–æ–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'),
        participationVariant: Yup.string()
            .required('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —É—á–∞—Å—Ç–∏—è'),
        link: Yup.string()
            .required('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç")')


    });

    const data = {};

    const onSubmit = (values, {resetForm}) => {

        console.log(values)
        data.form = {
            "url": `https://workshop.rivierasunrise.ru/`
        };
        data.inputs = [
            {
                "alias": "–ò—Å—Ç–æ—á–Ω–∏–∫",
                "value": "–§–æ—Ä–º–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –°–≤–∞–¥–µ–±–Ω–æ–≥–æ –í–æ—Ä–∫—à–æ–ø–∞",
            },
            {
                "alias": "–ò–º—è",
                "value": values.name,
            },
            {
                "alias": "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                "value": values.phone,
            },
            {
                "alias": "E-mail",
                "value": values.email,
            },
            {
                "alias": "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
                "value": values.juridical,
            },
            {
                "alias": "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
                "value": values.commercial,
            },
            {
                "alias": "–í–µ–±—Å–∞–π—Ç",
                "value": values.website,
            },
            {
                "alias": "–°–æ–æ–±—â–µ–Ω–∏–µ",
                "value": values.message,
            },
        ];

        request(data)
            .then((response) => {
                if (response.status === 200) {
                    const name = values.name[0].toUpperCase() + values.name.slice(1);
                    swal.fire({
                        title: `–°–ø–∞—Å–∏–±–æ, ${name}!`,
                        text: '–≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –≤ —Å–∞–º–æ–µ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è',
                        icon: 'success',
                        confirmButtonText: '–û—Ç–ª–∏—á–Ω–æ'
                    })
                }
            })
            .catch((err) => {
                swal.fire({
                    title: '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ü§≠',
                    text: '–ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º!',
                    icon: 'error',
                    confirmButtonText: '–ü–æ–Ω—è—Ç–Ω–æ'
                })
                console.log(err)
            });

        resetForm({})

        console.log('values', data);

    };


    const handleFieldOfActivityChange = (e) => {
        setFieldOfActivityInputValue(e.target.value)
        if (e.target.value === 'other') setShowExtraField(true)
        else setShowExtraField(false)
    }


    if (type === "bride") return <Formik
        initialValues={{
            requiredSpecialist: 'initial'
        }}
        validationSchema={Schema}
        onSubmit={onSubmit}>
        <Form>
            <Field component={Input} name="name" placeholder={'–ò–º—è'}/>
            <Field component={NumInput} name="phone" placeholder={'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'}/>
            <Field component={DateInput} name="weddingDate" placeholder={'–î–∞—Ç–∞ —Å–≤–∞–¥—å–±—ã'}/>
            <Field component={Input} name="city" placeholder={'–ì–æ—Ä–æ–¥'}/>
            <Field component={Input} name="guestsAmount" placeholder={'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –Ω–∞ —Å–≤–∞–¥—å–±–µ'}/>
            <Field as="select" name="requiredSpecialist">
                <option value="initial" disabled>–ö–∞–∫–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –í—ã –∏—â–∏—Ç–µ?</option>
                <option value="place">–ù—É–∂–Ω–∞ –ø–ª–æ—â–∞–¥–∫–∞</option>
                <option value="host">–ù—É–∂–µ–Ω –≤–µ–¥—É—â–∏–π</option>
                <option value="decorator">–ù—É–∂–µ–Ω –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä</option>
                <option value="stylist">–ù—É–∂–µ–Ω —Å—Ç–∏–ª–∏—Å—Ç</option>
                <option value="photograph">–ù—É–∂–µ–Ω —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ</option>
                <option value="videograph">–ù—É–∂–µ–Ω –≤–∏–¥–µ–æ–≥—Ä–∞—Ñ</option>
                <option value="organizator">–ù—É–∂–µ–Ω –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä</option>
                <option value="conditer">–ù—É–∂–µ–Ω –∫–æ–Ω–¥–∏—Ç–µ—Ä</option>
            </Field>

            <button style={{width: '100%'}} className={s.button} type="submit">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</button>
        </Form>
    </Formik>

    else if (type === "organizator") return <Formik
        initialValues={{
            fieldOfActivity: 'initial',
            participationVariant: 'initial'
        }}
        validationSchema={Schema}
        onSubmit={onSubmit}>
        <Form>
            <Field component={Input} name="name" placeholder={'–ò–º—è'}/>
            <Field component={NumInput} name="phone" placeholder={'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'}/>
            <Field component={Input} name="companyName" placeholder={'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏'}/>
            <Field as="select" name="fieldOfActivity" value={fieldOfActivityInputValue}
                   onChange={handleFieldOfActivityChange}>
                <option value="initial" disabled>–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</option>
                <option value="place">–í–ª–∞–¥–µ–ª–µ—Ü –ø–ª–æ—â–∞–¥–∫–∏</option>
                <option value="host">–Ø –≤–µ–¥—É—â–∏–π</option>
                <option value="decorator">–Ø –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä</option>
                <option value="stylist">–Ø —Å—Ç–∏–ª–∏—Å—Ç</option>
                <option value="photograph">–Ø —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ</option>
                <option value="videograph">–Ø –≤–∏–¥–µ–æ–≥—Ä–∞—Ñ</option>
                <option value="organizator">–Ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä</option>
                <option value="conditer">–Ø –∫–æ–Ω–¥–∏—Ç–µ—Ä</option>
                <option value="other">–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç</option>
            </Field>
            {showExtraField && <Field component={Input} name="otherActivity" placeholder={'–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'}/>}
            <Field as="select" name="participationVariant">
                <option value="initial" disabled>–í–∞—Ä–∏–∞–Ω—Ç —É—á–∞—Å—Ç–∏—è –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏</option>
                <option value="guest">–ì–æ—Å—Ç—å</option>
                <option value="coorganizator">–°–æ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä</option>
            </Field>
            <Field component={Input} name="link" placeholder={'–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç/—Å–æ—Ü—Å–µ—Ç—å'}/>

            <button style={{width: '100%'}} className={s.button} type="submit">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</button>
        </Form>
    </Formik>

};

export default withRouter(WorkshopForm)