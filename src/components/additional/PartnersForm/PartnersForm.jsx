import React from 'react';
import {Formik, Form, Field} from 'formik';
import * as Yup from 'yup';
import s from "../../shared/Button/Button.module.scss";
import cx from "classnames";
import {withRouter} from "react-router-dom";
import {request} from "../../../api";
import swal from 'sweetalert2';


const Input = ({
                   field,
                   form: {touched, errors},
                   ...props
               }) => {
    const classNames = cx('input', {'success': touched[field.name] && !errors[field.name]}, {'error': touched[field.name] && errors[field.name]})
    return <div style={{position: 'relative'}}>
        <input type="text" className={classNames} {...field} {...props} />
        {touched[field.name] &&
        errors[field.name] && <div className="error">{errors[field.name]}</div>}
    </div>
};

const Textarea = ({
                   field,
                   form: {touched, errors},
                   ...props
               }) => {
    const classNames = cx('input', {'success': touched[field.name] && !errors[field.name]}, {'error': touched[field.name] && errors[field.name]})
    return <div style={{position: 'relative'}}>
        <textarea rows={6} className={classNames} {...field} {...props} />
        {touched[field.name] &&
        errors[field.name] && <div className="error">{errors[field.name]}</div>}
    </div>
};

const PartnersForm = (props) => {

    const rePhoneNumber = /^(\+?\d{0,4})?\s?-?\s?(\(?\d{3}\)?)\s?-?\s?(\(?\d{3}\)?)\s?-?\s?(\(?\d{4}\)?)?$/;
    Yup.addMethod(Yup.string, "phone", function() {
        return this.test("phone", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä", value =>
            rePhoneNumber.test(value)
        );
    });

    const Schema = Yup.object().shape({
        name: Yup.string()
            .min(2, '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ')
            .max(50, '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –§–ò–û')
            .required('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è'),
        phone: Yup.string()
            .min(11, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7xxxxxxxxxx')
            .max(16, '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
            .phone()
            .required('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'),
        email: Yup.string()
            .email('E-mail –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
            .required('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É'),
        message: Yup.string()
            .min(2, '–°–ª–∏—à–∫–æ–º –º–∞–ª–æ –±—É–∫–≤ üò¢')
            .max(3000, '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±—É–∫–≤ üò¢')
            .required('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'),
        juridical: Yup.string()
            .max(50, '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')
            .required('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ'),
        commercial: Yup.string()
            .max(50, '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')
            .required('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ'),
        website: Yup.string()
            .min(3, '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞')
            .max(300, '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞')
    });

    const data = {};

    const onSubmit = (values, {resetForm}) => {
        data.form = {
            "url": `https://partners.rivierasunrise.ru/partners`
        };
        data.inputs = [
            {
                "alias": "–ò—Å—Ç–æ—á–Ω–∏–∫",
                "value": "–§–æ—Ä–º–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ü–∞—Ä—Ç–Ω—ë—Ä–∞–º",
            },
            {
                "alias": "–ò–º—è",
                "value": values.name,
            },
            {
                "alias": "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                "value": values.phone,
            },
            {
                "alias": "E-mail",
                "value": values.email,
            },
            {
                "alias": "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
                "value": values.juridical,
            },
            {
                "alias": "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
                "value": values.commercial,
            },
            {
                "alias": "–í–µ–±—Å–∞–π—Ç",
                "value": values.website,
            },
            {
                "alias": "–°–æ–æ–±—â–µ–Ω–∏–µ",
                "value": values.message,
            },
        ];

        request(data)
            .then((response) => {
                if (response.status === 200) {
                    const name = values.name[0].toUpperCase() + values.name.slice(1);
                    swal.fire({
                        title: `–°–ø–∞—Å–∏–±–æ, ${name}!`,
                        text: '–≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –≤ —Å–∞–º–æ–µ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è',
                        icon: 'success',
                        confirmButtonText: '–û—Ç–ª–∏—á–Ω–æ'
                    })
                }
            })
            .catch((err) => {
                swal.fire({
                    title: '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ü§≠',
                    text: '–ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º!',
                    icon: 'error',
                    confirmButtonText: '–ü–æ–Ω—è—Ç–Ω–æ'
                })
                console.log(err)
            });

        resetForm({})

        console.log('values', data);

    };


    return <Formik
        initialValues={{
            name: '',
            phone: '',
            email: '',
            juridical: '',
            commercial: '',
            website: '',
            message: '',
        }}
        validationSchema={Schema}
        onSubmit={onSubmit}>
        <Form>
            <Field component={Input} name="name" placeholder={'–í–≤–µ–¥–∏—Ç–µ –§–ò–û'}/>
            <Field component={Input} name="phone" placeholder={'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'}/>
            <Field component={Input} name="email" placeholder={'–í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É'}/>
            <Field component={Input} name="juridical" placeholder={'–í–≤–µ–¥–∏—Ç–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏'}/>
            <Field component={Input} name="commercial" placeholder={'–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏'}/>
            <Field component={Input} name="website" placeholder={'–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–∞–π—Ç–∞ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)'}/>
            <Field component={Textarea} name="message" placeholder={'–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'}/>

            <button style={{width: '100%'}} className={s.button} type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ</button>
        </Form>
    </Formik>
};

export default withRouter(PartnersForm)